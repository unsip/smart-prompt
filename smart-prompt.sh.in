#!/bin/bash
#
# This is a `main` module of the SmartPrompt engine.
#
# Smart Prompt @SP_VERSION@
# Copyright (c) 2013 Alex Turbov <i.zaufi@gmail.com>
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#

# Load configuration file
if [ -f @SMART_PROMPT_CONFIG@ ]; then
    source @SMART_PROMPT_CONFIG@
fi

# Load user level overrides
if [ -f ~/.@PROJECT_NAME@rc ]; then
    source ~/.@PROJECT_NAME@rc
fi

# Declare a global associative array to be filled by found plugins
declare -A SMART_PROMPT_PLUGINS

# Loading user plugins
if [ -d ~/.@PROJECT_NAME@.d ]; then
    for plugin in `ls -v1 ~/.@PROJECT_NAME@.d/[0-9][0-9]*.sh`; do
        #echo "loading ${plugin}..."
        source ${plugin}
    done
fi

# Loading plugins
if [ -d @SP_CONTEXT_CHECKERS_DIR@ ]; then
    for plugin in `ls -v1 @SP_CONTEXT_CHECKERS_DIR@/[0-9][0-9]*.sh`; do
        if [ -n "${SP_DEBUG_SPAM}" ]; then
            echo "sp: loading ${plugin}..."
        fi
        source ${plugin}
    done
fi

# Include reusable functions into the scope
if [ -f @SP_LIBEXECDIR@/@PROJECT_NAME@-functions.sh ]; then
    source @SP_LIBEXECDIR@/@PROJECT_NAME@-functions.sh
else
    logger -t @PROJECT_NAME@ "Reusable functions library " \
        "'@SP_LIBEXECDIR@/@PROJECT_NAME@-functions.sh' "   \
        "not found. Installation seems broken!"
    return
fi

function _get_registered_context_checkers()
{
    for checker in "${!SMART_PROMPT_PLUGINS[@]}"; do
        echo "${checker}"
    done | sort
}

function _@PROJECT_NAME@()
{
    local sp_path
    local sp_user
    local sp_reset

    # Get configured colors (or defaults)
    # NOTE Before set desired color, make sure there is no
    # other styles in effect...it is why `reset' is a leading
    # (and hardcoded) "color" in a sequence...
    _eval_color_string "reset ${SP_PATH:-bright-blue}" sp_path
    if [[ ${EUID} != 0 ]]; then
        _eval_color_string "reset ${SP_USER:-bright-green}" sp_user
    else
        _eval_color_string "reset ${SP_SUSER:-bright-red}" sp_user
    fi
    _eval_color_string 'reset' sp_reset

    local sp_seg_delim=${SP_SEGMENT_DELIMITER:-"\342\214\252"}
    # TODO Make the prompt format configurable? Really?
    local start="${sp_user}\u@\h${sp_path}${sp_seg_delim}\w "
    local end="${sp_seg_delim}${sp_reset}"
    local middle=''

    # Iterate over registered plugins and collect strings to be appended to PS1
    for checker in $(_get_registered_context_checkers); do
        if [ -n "${SP_DEBUG_SPAM}" ]; then
            echo -n "checking ${checker}... "
        fi
        if `${checker}`; then
            if [ -n "${SP_DEBUG_SPAM}" ]; then
                echo "ok"
            fi
            middle=`${SMART_PROMPT_PLUGINS[$checker]}`
            break
        elif [ -n "${SP_DEBUG_SPAM}" ]; then
            echo "!!"
        fi
    done
    # Iterate over registered plugins and collect strings to be appended to PS1
    if [ -z "$middle" ]; then
        PS1="${start}${end}"
    else
        PS1="${start}${sp_seg_delim}${middle}${sp_path}${end}"
    fi
}

export PROMPT_COMMAND=_@PROJECT_NAME@

# kate: hl bash;
